
interrupt_2_pins_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000030  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000b3  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000006b  00000000  00000000  00000223  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000e9  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  0000005c  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000170  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000005e  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000020  00000000  00000000  000005a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <avr/interrupt.h>

int main(void)
{
	DDRA |=(1<<PA0);
  6c:	d0 9a       	sbi	0x1a, 0	; 26
	DDRA |=(1<<PA6);
  6e:	d6 9a       	sbi	0x1a, 6	; 26
	DDRB |=(1<<PB3);
  70:	bb 9a       	sbi	0x17, 3	; 23
	
	DDRD &=~(1<<PD2)|(1<<PD3);
  72:	8a 98       	cbi	0x11, 2	; 17
	PORTD |=(1<<PD2)|(1<<PD3);
  74:	82 b3       	in	r24, 0x12	; 18
  76:	8c 60       	ori	r24, 0x0C	; 12
  78:	82 bb       	out	0x12, r24	; 18
	
	
	MCUCR |=(1<<ISC01)|(1<<ISC11);
  7a:	85 b7       	in	r24, 0x35	; 53
  7c:	8a 60       	ori	r24, 0x0A	; 10
  7e:	85 bf       	out	0x35, r24	; 53
	
	GICR |=(1<<INT0)|(1<<INT1);
  80:	8b b7       	in	r24, 0x3b	; 59
  82:	80 6c       	ori	r24, 0xC0	; 192
  84:	8b bf       	out	0x3b, r24	; 59
	
	
	sei();
  86:	78 94       	sei
    while(1)
    {
        PORTA |=(1<<PA0);
  88:	d8 9a       	sbi	0x1b, 0	; 27
  8a:	fe cf       	rjmp	.-4      	; 0x88 <main+0x1c>

0000008c <__vector_1>:
	
	return 0;
}

ISR(INT0_vect)
{
  8c:	1f 92       	push	r1
  8e:	0f 92       	push	r0
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	0f 92       	push	r0
  94:	11 24       	eor	r1, r1
	PORTA |=(1<<PA6);
  96:	de 9a       	sbi	0x1b, 6	; 27
}
  98:	0f 90       	pop	r0
  9a:	0f be       	out	0x3f, r0	; 63
  9c:	0f 90       	pop	r0
  9e:	1f 90       	pop	r1
  a0:	18 95       	reti

000000a2 <__vector_2>:

ISR(INT1_vect)
{
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
	PORTB |=(1<<PB3);
  ac:	c3 9a       	sbi	0x18, 3	; 24
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
