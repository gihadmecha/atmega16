
protocal_string_serial_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000000c2  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000014b  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000eb  00000000  00000000  000002d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000151  00000000  00000000  000003c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00000514  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001dc  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000018  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <avr/delay.h>

int main(void)
{
	uint16_t UBBR_value = 103;
	UBRRL = (uint8_t)UBBR_value;
  82:	87 e6       	ldi	r24, 0x67	; 103
  84:	89 b9       	out	0x09, r24	; 9
	UBRRH = (uint8_t)(UBBR_value>>8);
  86:	10 bc       	out	0x20, r1	; 32
	UCSRB = (1<<RXEN)|(1<<TXEN);
  88:	88 e1       	ldi	r24, 0x18	; 24
  8a:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (3<<UCSZ0);
  8c:	80 b5       	in	r24, 0x20	; 32
  8e:	86 60       	ori	r24, 0x06	; 6
  90:	80 bd       	out	0x20, r24	; 32
	
	

    while(1)
    {
		char *word = "UART";
  92:	e0 e6       	ldi	r30, 0x60	; 96
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	cf 01       	movw	r24, r30
  98:	04 c0       	rjmp	.+8      	; 0xa2 <main+0x20>
		while(*word > 0)
		{
			
			while(!(UCSRA &(1<<UDRE)));
  9a:	5d 9b       	sbis	0x0b, 5	; 11
  9c:	fe cf       	rjmp	.-4      	; 0x9a <main+0x18>
			UDR = *word++;
  9e:	31 96       	adiw	r30, 0x01	; 1
  a0:	2c b9       	out	0x0c, r18	; 12
	

    while(1)
    {
		char *word = "UART";
		while(*word > 0)
  a2:	20 81       	ld	r18, Z
  a4:	21 11       	cpse	r18, r1
  a6:	f9 cf       	rjmp	.-14     	; 0x9a <main+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	33 ed       	ldi	r19, 0xD3	; 211
  ac:	40 e3       	ldi	r20, 0x30	; 48
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	30 40       	sbci	r19, 0x00	; 0
  b2:	40 40       	sbci	r20, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x2c>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x36>
  b8:	00 00       	nop
	
	

    while(1)
    {
		char *word = "UART";
  ba:	fc 01       	movw	r30, r24
  bc:	f2 cf       	rjmp	.-28     	; 0xa2 <main+0x20>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
