
receiver_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000098  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000ec  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000b7  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000073  00000000  00000000  000001f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000c0  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000187  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000010  00000000  00000000  000004d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4a 00 	jmp	0x94	; 0x94 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 16000000
#include <avr/io.h>

int main(void)
{
	DDRC |=(1<<PC0);
  6c:	a0 9a       	sbi	0x14, 0	; 20
	
	uint16_t UBRR_value = 103;
	UBRRL = (uint8_t)UBRR_value;
  6e:	87 e6       	ldi	r24, 0x67	; 103
  70:	89 b9       	out	0x09, r24	; 9
	UBRRH = (uint8_t)(UBRR_value>>8);
  72:	10 bc       	out	0x20, r1	; 32
	UCSRB = (1<<RXEN)|(1<<TXEN);
  74:	88 e1       	ldi	r24, 0x18	; 24
  76:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (3<<UCSZ0);
  78:	80 b5       	in	r24, 0x20	; 32
  7a:	86 60       	ori	r24, 0x06	; 6
  7c:	80 bd       	out	0x20, r24	; 32
	
	char received ;
	
    while(1)
    {
		while(!(UCSRA &(1<<RXC)));
  7e:	5f 9b       	sbis	0x0b, 7	; 11
  80:	fe cf       	rjmp	.-4      	; 0x7e <main+0x12>
		received = UDR;
  82:	8c b1       	in	r24, 0x0c	; 12
		
		if (received == 'N')
  84:	8e 34       	cpi	r24, 0x4E	; 78
  86:	11 f4       	brne	.+4      	; 0x8c <main+0x20>
		{
			PORTC |=(1<<PC0);
  88:	a8 9a       	sbi	0x15, 0	; 21
  8a:	f9 cf       	rjmp	.-14     	; 0x7e <main+0x12>
		}
        
		if (received == 'F')
  8c:	86 34       	cpi	r24, 0x46	; 70
  8e:	b9 f7       	brne	.-18     	; 0x7e <main+0x12>
		{
			PORTC &=~(1<<PC0);
  90:	a8 98       	cbi	0x15, 0	; 21
  92:	f5 cf       	rjmp	.-22     	; 0x7e <main+0x12>

00000094 <_exit>:
  94:	f8 94       	cli

00000096 <__stop_program>:
  96:	ff cf       	rjmp	.-2      	; 0x96 <__stop_program>
