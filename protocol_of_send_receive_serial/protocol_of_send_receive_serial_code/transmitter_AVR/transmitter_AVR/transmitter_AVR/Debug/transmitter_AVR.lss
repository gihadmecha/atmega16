
transmitter_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000015a  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f4  00000000  00000000  000002c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000152  00000000  00000000  000003b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000508  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001d5  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000048  00000000  00000000  00000701  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  00000749  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <avr/delay.h>

int main(void)
{
	DDRC &=~(1<<PD0)|(1<<PD3);
  6c:	a0 98       	cbi	0x14, 0	; 20
	PORTC |=(1<<PD0)|(1<<PD3);
  6e:	85 b3       	in	r24, 0x15	; 21
  70:	89 60       	ori	r24, 0x09	; 9
  72:	85 bb       	out	0x15, r24	; 21
	
	uint16_t UBRR_value = 103;
	UBRRL = (uint8_t)UBRR_value;
  74:	87 e6       	ldi	r24, 0x67	; 103
  76:	89 b9       	out	0x09, r24	; 9
	UBRRH = (uint8_t)(UBRR_value>>8);
  78:	10 bc       	out	0x20, r1	; 32
	UCSRB = (1<<RXEN)|(1<<TXEN);
  7a:	88 e1       	ldi	r24, 0x18	; 24
  7c:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (3<<UCSZ0);
  7e:	86 e0       	ldi	r24, 0x06	; 6
  80:	80 bd       	out	0x20, r24	; 32
    while(1)
    {
		if (bit_is_clear(PINC,0))
		{
			while(!(UCSRA &(1<<UDRE)));
			UDR = 'N';
  82:	8e e4       	ldi	r24, 0x4E	; 78
		}
        
		if (bit_is_clear(PINC,3))
		{
			while(!(UCSRA &(1<<UDRE)));
			UDR = 'F';
  84:	96 e4       	ldi	r25, 0x46	; 70
	UCSRB = (1<<RXEN)|(1<<TXEN);
	UCSRC = (3<<UCSZ0);
	
    while(1)
    {
		if (bit_is_clear(PINC,0))
  86:	98 99       	sbic	0x13, 0	; 19
  88:	0c c0       	rjmp	.+24     	; 0xa2 <main+0x36>
		{
			while(!(UCSRA &(1<<UDRE)));
  8a:	5d 9b       	sbis	0x0b, 5	; 11
  8c:	fe cf       	rjmp	.-4      	; 0x8a <main+0x1e>
			UDR = 'N';
  8e:	8c b9       	out	0x0c, r24	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	2f ef       	ldi	r18, 0xFF	; 255
  92:	33 ed       	ldi	r19, 0xD3	; 211
  94:	40 e3       	ldi	r20, 0x30	; 48
  96:	21 50       	subi	r18, 0x01	; 1
  98:	30 40       	sbci	r19, 0x00	; 0
  9a:	40 40       	sbci	r20, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x2a>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x34>
  a0:	00 00       	nop
			_delay_ms(1000);
		}
        
		if (bit_is_clear(PINC,3))
  a2:	9b 99       	sbic	0x13, 3	; 19
  a4:	f0 cf       	rjmp	.-32     	; 0x86 <main+0x1a>
		{
			while(!(UCSRA &(1<<UDRE)));
  a6:	5d 9b       	sbis	0x0b, 5	; 11
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <main+0x3a>
			UDR = 'F';
  aa:	9c b9       	out	0x0c, r25	; 12
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	33 ed       	ldi	r19, 0xD3	; 211
  b0:	40 e3       	ldi	r20, 0x30	; 48
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	30 40       	sbci	r19, 0x00	; 0
  b6:	40 40       	sbci	r20, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x46>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x50>
  bc:	00 00       	nop
  be:	e3 cf       	rjmp	.-58     	; 0x86 <main+0x1a>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
